#Estados
start_state = 0
error_state = 3
final_state = [1,2,3]

#Caracteres
separator = [' ',',',';','*','(',')','\'','$']

#Transições
#(estado atual, caracter atual da fita, proximo estado)
transition = [
    (0,'a',1),(0,'b',2),
    (1,'a',1),(1,'b',3),
    (2,'a',3),(2,'b',2),
    (3,'a',3),(3,'b',3)
]

transition = [
    (0,'a',1),(0,'b',1),(0,'c',3),(0,'d',1),(0,'e',1),(0,'f',4),(0,'g',1),(0,'h',1),(0,'i',5),(0,'j',1),(0,'k',1),(0,'l',1),(0,'m',1),(0,'n',1),(0,'o',1),(0,'p',1),(0,'q',1),(0,'r',1),(0,'s',6),(0,'t',7),(0,'u',1),(0,'v',8),(0,'w',1),(0,'x',1),(0,'y',1),(0,'z',1),
    (1,'a',1),(1,'b',1),(1,'c',1),(1,'d',1),(1,'e',1),(1,'f',1),(1,'g',1),(1,'h',1),(1,'i',1),(1,'j',1),(1,'k',1),(1,'l',1),(1,'m',1),(1,'n',1),(1,'o',1),(1,'p',1),(1,'q',1),(1,'r',1),(1,'s',1),(1,'t',1),(1,'u',1),(1,'v',1),(1,'w',1),(1,'x',1),(1,'y',1),(1,'z',1),
    (2,'a',1),(2,'b',1),(2,'c',1),(2,'d',1),(2,'e',1),(2,'f',1),(2,'g',1),(2,'h',1),(2,'i',1),(2,'j',1),(2,'k',1),(2,'l',1),(2,'m',1),(2,'n',1),(2,'o',1),(2,'p',1),(2,'q',1),(2,'r',16),(2,'s',1),(2,'t',1),(2,'u',1),(2,'v',1),(2,'w',1),(2,'x',1),(2,'y',1),(2,'z',1),
    (3,'a',17),(3,'b',1),(3,'c',1),(3,'d',1),(3,'e',1),(3,'f',1),(3,'g',1),(3,'h',1),(3,'i',1),(3,'j',1),(3,'k',1),(3,'l',1),(3,'m',1),(3,'n',1),(3,'o',1),(3,'p',1),(3,'q',1),(3,'r',18),(3,'s',1),(3,'t',1),(3,'u',1),(3,'v',1),(3,'w',1),(3,'x',1),(3,'y',1),(3,'z',1),
    (4,'a',1),(4,'b',1),(4,'c',1),(4,'d',1),(4,'e',1),(4,'f',1),(4,'g',1),(4,'h',1),(4,'i',1),(4,'j',1),(4,'k',1),(4,'l',1),(4,'m',1),(4,'n',1),(4,'o',1),(4,'p',1),(4,'q',1),(4,'r',19),(4,'s',1),(4,'t',1),(4,'u',1),(4,'v',1),(4,'w',1),(4,'x',1),(4,'y',1),(4,'z',1),
    (5,'a',1),(5,'b',1),(5,'c',1),(5,'d',1),(5,'e',1),(5,'f',1),(5,'g',1),(5,'h',1),(5,'i',1),(5,'j',1),(5,'k',1),(5,'l',1),(5,'m',1),(5,'n',20),(5,'o',1),(5,'p',1),(5,'q',1),(5,'r',1),(5,'s',1),(5,'t',1),(5,'u',1),(5,'v',1),(5,'w',1),(5,'x',1),(5,'y',1),(5,'z',1),
    (6,'a',1),(6,'b',1),(6,'c',1),(6,'d',1),(6,'e',21),(6,'f',1),(6,'g',1),(6,'h',1),(6,'i',1),(6,'j',1),(6,'k',1),(6,'l',1),(6,'m',1),(6,'n',1),(6,'o',1),(6,'p',1),(6,'q',1),(6,'r',1),(6,'s',1),(6,'t',1),(6,'u',1),(6,'v',1),(6,'w',1),(6,'x',1),(6,'y',1),(6,'z',1),
    (7,'a',22),(7,'b',1),(7,'c',1),(7,'d',1),(7,'e',1),(7,'f',1),(7,'g',1),(7,'h',1),(7,'i',1),(7,'j',1),(7,'k',1),(7,'l',1),(7,'m',1),(7,'n',1),(7,'o',1),(7,'p',1),(7,'q',1),(7,'r',1),(7,'s',1),(7,'t',1),(7,'u',1),(7,'v',1),(7,'w',1),(7,'x',1),(7,'y',1),(7,'z',1),
    (8,'a',23),(8,'b',1),(8,'c',1),(8,'d',1),(8,'e',1),(8,'f',1),(8,'g',1),(8,'h',1),(8,'i',1),(8,'j',1),(8,'k',1),(8,'l',1),(8,'m',1),(8,'n',1),(8,'o',1),(8,'p',1),(8,'q',1),(8,'r',1),(8,'s',1),(8,'t',1),(8,'u',1),(8,'v',1),(8,'w',1),(8,'x',1),(8,'y',1),(8,'z',1),
    (9,'a',1),(9,'b',1),(9,'c',1),(9,'d',1),(9,'e',1),(9,'f',1),(9,'g',1),(9,'h',1),(9,'i',1),(9,'j',1),(9,'k',1),(9,'l',1),(9,'m',1),(9,'n',1),(9,'o',1),(9,'p',1),(9,'q',1),(9,'r',1),(9,'s',1),(9,'t',1),(9,'u',1),(9,'v',1),(9,'w',1),(9,'x',1),(9,'y',1),(9,'z',1),
    (10,'a',55),(10,'b',55),(10,'c',55),(10,'d',55),(10,'e',55),(10,'f',55),(10,'g',55),(10,'h',55),(10,'i',55),(10,'j',55),(10,'k',55),(10,'l',55),(10,'m',55),(10,'n',55),(10,'o',55),(10,'p',55),(10,'q',55),(10,'r',55),(10,'s',55),(10,'t',55),(10,'u',55),(10,'v',55),(10,'w',55),(10,'x',55),(10,'y',55),(10,'z',55),
    (11,'a',55),(11,'b',55),(11,'c',55),(11,'d',55),(11,'e',55),(11,'f',55),(11,'g',55),(11,'h',55),(11,'i',55),(11,'j',55),(11,'k',55),(11,'l',55),(11,'m',55),(11,'n',55),(11,'o',55),(11,'p',55),(11,'q',55),(11,'r',55),(11,'s',55),(11,'t',55),(11,'u',55),(11,'v',55),(11,'w',55),(11,'x',55),(11,'y',55),(11,'z',55),
    (12,'a',55),(12,'b',55),(12,'c',55),(12,'d',55),(12,'e',55),(12,'f',55),(12,'g',55),(12,'h',55),(12,'i',55),(12,'j',55),(12,'k',55),(12,'l',55),(12,'m',55),(12,'n',55),(12,'o',55),(12,'p',55),(12,'q',55),(12,'r',55),(12,'s',55),(12,'t',55),(12,'u',55),(12,'v',55),(12,'w',55),(12,'x',55),(12,'y',55),(12,'z',55),
    (13,'a',55),(13,'b',55),(13,'c',55),(13,'d',55),(13,'e',55),(13,'f',55),(13,'g',55),(13,'h',55),(13,'i',55),(13,'j',55),(13,'k',55),(13,'l',55),(13,'m',55),(13,'n',55),(13,'o',55),(13,'p',55),(13,'q',55),(13,'r',55),(13,'s',55),(13,'t',55),(13,'u',55),(13,'v',55),(13,'w',55),(13,'x',55),(13,'y',55),(13,'z',55),
    (14,'a',55),(14,'b',55),(14,'c',55),(14,'d',55),(14,'e',55),(14,'f',55),(14,'g',55),(14,'h',55),(14,'i',55),(14,'j',55),(14,'k',55),(14,'l',55),(14,'m',55),(14,'n',55),(14,'o',55),(14,'p',55),(14,'q',55),(14,'r',55),(14,'s',55),(14,'t',55),(14,'u',55),(14,'v',55),(14,'w',55),(14,'x',55),(14,'y',55),(14,'z',55),
    (15,'a',55),(15,'b',55),(15,'c',55),(15,'d',55),(15,'e',55),(15,'f',55),(15,'g',55),(15,'h',55),(15,'i',55),(15,'j',55),(15,'k',55),(15,'l',55),(15,'m',55),(15,'n',55),(15,'o',55),(15,'p',55),(15,'q',55),(15,'r',55),(15,'s',55),(15,'t',55),(15,'u',55),(15,'v',55),(15,'w',55),(15,'x',55),(15,'y',55),(15,'z',55),
    
    ]

#Procura o proximo estado
def next_state(state,char): #Estado e caracter da fita atuais
    #Percorre procurando uma regra de transição correspondente
    for t in transition:
        if t[0] == state and t[1] == char:
            #Retorna o proximo estado
            return t[2]
    return error_state

#Passa pelo arquivo de entrada verificando cada caracter
def start(_in,_out): #Acesso aos arquivos de input e output
    #Estado inicial
    state = start_state
    while 1:
        #Procura proxima caracter
        char = _in.read(1)
        #Se separador, salva e recomeça
        if char in separator:
            if state in final_state:
                _out.write(str(state))
            #Se ' ' não salva
            if char != ' ':
                _out.write(char)
            #Se final de sentença morre
            if char == '$':
                break
            state = start_state
            continue
        #Procura o proximo estado
        state = next_state(state,char)